from aiogram import   F, Router
from aiogram.filters import CommandStart , Command
from aiogram.types import Message, CallbackQuery
import config as c
import app.keyboards as kb
from aiogram.types import FSInputFile
import app.fuctions as f
from random import randint
from app.database.request import save_user,add_task, get_user, get_task_des, set_time, delet_task_by_title
from app.midelware import AddTask, AddTime
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

router = Router()



# –ö–æ–º–∞–Ω–¥–∞ /start –∏ –¥–æ–±–æ–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–¥
@router.message(CommandStart())
async def start(message: Message):
    await save_user(message.from_user.id)
    await message.answer(f'''
üìö–î–∞–Ω–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç !  
–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç —Ç–µ–±–µ –æ –ø–∞—Ä–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–æ–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ.  
–ö–æ–º–∞–Ω–¥–∞ /help —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –±–æ–ª—å—à–µ. 
''')

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@router.message(Command('today'))
async def today(message: Message):
    lastmg = f.getToday(c.weekday_index)
    ran = randint(1, 36)
    photo = FSInputFile(f'media/images/{ran}.jpg')
    await message.answer_photo(
        photo=photo,
        caption=lastmg,
    )

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@router.message(Command('tommorow'))
async def today(message: Message):
    lastmg = f.getToday(0 if c.weekday_index + 1 > 6 else c.weekday_index+1)
    ran = randint(1, 36)
    photo = FSInputFile(f'media/images/{ran}.jpg')
    await message.answer_photo(
        photo=photo,
        caption=lastmg,
    )


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
@router.message(Command('bells'))
async def bells(message: Message):
    await message.answer(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>',  parse_mode="HTML", reply_markup=kb.chose_bell)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
@router.message(Command('all'))
async def start(message: Message):
    msg = []
    for i in range(6):
        msg.append(f'\n{f.text(c.days[i])}\n {f.getToday(i)}')
    lastmsg = ''.join(msg)
    await message.answer(f'{lastmsg}')

# –í—ã–±–æ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
@router.message(Command('chose_day'))
async def chose_def(message: Message):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–π –¥–µ–Ω—å', reply_markup=kb.chose_day)



# –ö–æ–º–∞–Ω–¥–∞ help
@router.message(Command('help'))
async def hepl(message: Message):
    await message.answer('''
            üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
üîπ /start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üîπ /today ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.
üîπ /all ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
üîπ /bells ‚Äî –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–æ–≤ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤).
üîπ /chose_day ‚Äî –¥–ª—è –æ–∂–Ω–æ–≥–æ –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
üîπ /set_time ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
üîπ /add_task ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
üîπ /get_tasks ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á
üîπ /tomorrow ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
üîπ /delete_task ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
üîπ /help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.

‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:

–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É—Ç—Ä–æ–º –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º, –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–º.

–ò–Ω–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è –≥–∏—Ñ–∫–æ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üôÇ''')


# –î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É
@router.message(Command('add_task'))
async def add_task_tg(message: Message,state: FSMContext):
    await state.set_state(AddTask.title)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–∞–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è:')

# –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è title –¥–ª—è Task
@router.message(AddTask.title)
async def add_title(message: Message, state: FSMContext):
    await state.update_data(title = message.text)
    await state.set_state(AddTask.des)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:')

# –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è des –¥–ª—è Task –∏ –µ–≥–æ —Å–æ—Ö—Ä–æ–Ω–µ–Ω–∏—è 
@router.message(AddTask.des)
async def add_des(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    await state.update_data(des=message.text)
    data = await state.get_data()
    task = await add_task(title=data['title'], des=data['des'], user = user)
    await message.answer('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É!')
    await state.clear()

# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è ( —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ 154... )
@router.message(Command('delete_task'))
async def delete_task(message: Message):
    user = await get_user(message.from_user.id)
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=await kb.all_taskss(user_id=user.id, callback_data_start='delet_task') )

# –ü–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ó–∞–¥–∞–Ω–∏–π 
@router.message(Command('get_tasks'))
async def get_tasks1(message: Message):
    user = await get_user(message.from_user.id)
    await message.answer(text='–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:', reply_markup=await kb.all_taskss(user.id , callback_data_start='add_task'))
# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è AddTime –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É —é–∑–µ—Ä–∞ –≤—Ä–µ–º—è
@router.message(Command('set_time'))
async def start_set_time(message: Message, state: FSMContext):
    await state.set_state(AddTime.time)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ç—Ä–µ–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00')

# –ö—Ä—á –∫–∞–∫ —Å–ø—Ä–æ—Å–∏–ª–∏ –≤—Ä–µ–º—è –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–¥–∞—ë–º –æ—à–∏–±–∫—É 
@router.message(AddTime.time)
async def set_time_hn(message: Message, state: FSMContext):
    try:
        hour = int(message.text.split(':')[0].strip()) 
        min = int(message.text.split(':')[1].strip())
        time = await set_time(tg_id=message.from_user.id, hour=hour, min=min)
    except (ValueError, IndexError):
        await message.answer('–ü–æ–∂–∞–π–ª—É—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "00:00" ')
    job_creat = await f.set_job(tg_id=message.from_user.id)
    await message.answer(f'–í–∞—à–∞ —É—Ç—Ä—è–Ω—è—è —Ä–∞—Å—Å–ª—ã–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ - {hour}:{min}')
    await state.clear()

# callback

@router.callback_query(F.data.startswith('bell_'))
async def get_bell(callback: CallbackQuery):
    index = int(callback.data.split('_')[1])
    msg = c.bell.get(index)
    await callback.message.edit_text(text=msg, parse_mode="HTML")
# –î–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
@router.callback_query(F.data.startswith('day_'))
async def get_day(callback: CallbackQuery):
    index = int(callback.data.split('_')[1])
    msg = f.getToday(index)  # –ü–æ–ª—á—É–º–∞–µ—Ç—å—Å—è –º—ã –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {c.days[index]}')
    await callback.message.answer(text=msg, show_alert=True)

# –î–ª—è –≤—ã–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith('add_task'))
async def get_des(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[-1])
    msg = await get_task_des(task_id=task_id)
    await callback.answer(f'–ó–∞–¥–∞—á–∞ {msg.title}')
    await callback.message.answer(f'<b>–û–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏</b>: {msg.des}', parse_mode='HTML')

# –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è Task 
@router.callback_query(F.data.startswith('delet_task_'))
async def  del_task(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[-1])
    try:
        await delet_task_by_title(task_id = task_id)
        await callback.answer(f'–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
        await callback.message.answer(f'–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    except IndexError:
        callback.message.answer(';')